# ring-json-response

This is a middleware that can be used to serialize a Clojure data structure in the :body of a Ring response to some string representation (JSON by default). It can easily be extended to other custom formats. It is intended for the creation of RESTful APIs.

## Usage

### Response Format Middleware

The simplest way to use the response middleware is by using the default JSON format:

  (ns my.server
    (:use [compojure.handler]
          [ring.middleware.format-response]))

  (def app
    (-> (api main-routes)
        (wrap-format-response)))

This will format the content of the :body key in the response to JSON if body is anything other than a String (in which case it will not be touched). There is also a json-accepted? predicate that looks at the Accept header of the request for the json MIME type. 
If you want to handle multiple or custom formats, the :predicate option takes a predicate fn with the req as the single param and returns true if serialization should be used.
:encoder specifies a fn taking the body as sole argument and giving back an encoded string.
:type allows to specify a Content-Type for the encoded string.
:charset can be either a string representing a valid charset or a fn taking the req as argument and returning a valid charset (defaults to utf-8).
This means the default behaviour is equivalent to:
  (def app
    (-> (api main-routes)
        (wrap-format-response
                :predicate serializable?
                :encoder clj-json.core/generate-string
                :type "application/json"
                :charset "utf-8")))

## License

Copyright (C) 2011 Nils Grunwald

Distributed under the Eclipse Public License, the same as Clojure.
